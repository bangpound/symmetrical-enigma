# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    GuzzleHttp\Client:
        arguments:
            $config:
                base_uri: '%env(CONSUL_HTTP_ADDR)%'
                http_errors: false
                allow_redirects: false
                handler: '@GuzzleHttp\HandlerStack'

    GuzzleHttp\ClientInterface: '@GuzzleHttp\Client'

    GuzzleHttp\HandlerStack:
        factory: ['GuzzleHttp\HandlerStack', 'create']
        calls:
            - ['push', [ !service { class: Closure, factory: [GuzzleHttp\Middleware, log], arguments: { $logger: '@logger', $formatter: '@GuzzleHttp\MessageFormatter' }, tags: [{ name: monolog.logger, channel: guzzle }] } ] ]

    GuzzleHttp\MessageFormatter:
        arguments:
            - '@=constant("GuzzleHttp\\MessageFormatter::DEBUG")'

    SensioLabs\Consul\ServiceFactory:
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: consul }

    SensioLabs\Consul\Client:
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: consul }

    SensioLabs\Consul\ClientInterface: '@SensioLabs\Consul\Client'

    SensioLabs\Consul\Services\KV:
        factory: ['@SensioLabs\Consul\ServiceFactory', 'get']
        arguments: ['SensioLabs\Consul\Services\KVInterface']

    SensioLabs\Consul\Services\KVInterface: '@SensioLabs\Consul\Services\KV'
